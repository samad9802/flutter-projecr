import 'dart:async'; 
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stopwatch App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: StopwatchPage(),
    );
  }
}

class StopwatchPage extends StatefulWidget {
  @override
  _StopwatchPageState createState() => _StopwatchPageState();
}

class _StopwatchPageState extends State<StopwatchPage> {
  int _seconds = 0; // To keep track of the elapsed time in seconds
  bool _isRunning = false; // Flag to track if stopwatch is running
  late Timer _timer; // Timer to update the elapsed time
  String _timeString = "00:00:00"; // To display time in HH:MM:SS format

  // Method to format time in HH:MM:SS
  String _formatTime(int seconds) {
    int hours = seconds ~/ 3600;
    int minutes = (seconds % 3600) ~/ 60;
    int remainingSeconds = seconds % 60;
    return "${_twoDigits(hours)}:${_twoDigits(minutes)}:${_twoDigits(remainingSeconds)}";
  }

  // Method to add leading zero to single-digit numbers
  String _twoDigits(int n) {
    return n.toString().padLeft(2, '0');
  }

  // Method to start/stop the stopwatch
  void _toggleTimer() {
    if (_isRunning) {
      _timer.cancel();
    } else {
      _timer = Timer.periodic(Duration(seconds: 1), (timer) {
        setState(() {
          _seconds++;
          _timeString = _formatTime(_seconds);
        });
      });
    }

    setState(() {
      _isRunning = !_isRunning;
    });
  }

  // Method to reset the stopwatch
  void _resetTimer() {
    _timer.cancel();
    setState(() {
      _seconds = 0;
      _timeString = "00:00:00";
      _isRunning = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Stopwatch'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _timeString, // Display the formatted time
              style: TextStyle(fontSize: 50, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 50),
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                ElevatedButton(
                  onPressed: _toggleTimer,
                  child: Text(_isRunning ? 'Stop' : 'Start'),
                  style: ElevatedButton.styleFrom(
                    padding: EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                  ),
                ),
                SizedBox(width: 20),
                ElevatedButton(
                  onPressed: _resetTimer,
                  child: Text('Reset'),
                  style: ElevatedButton.styleFrom(
                    padding: EdgeInsets.symmetric(horizontal: 30, vertical: 15),
                  ),
                ),
              ],
            )
          ],
        ),
      ),
    );
  }
}
